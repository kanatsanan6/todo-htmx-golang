package task

import (
	"fmt"
	"github.com/kanatsanan6/todo-htmx-go/internal/views/helper"
	"github.com/kanatsanan6/todo-htmx-go/internal/views/layouts"
	"github.com/kanatsanan6/todo-htmx-go/types"
)

templ Index(tasks []*types.Task) {
	@layouts.Base() {
		<h1 class="text-center w-full text-2xl mb-4 font-semibold">TODO LIST</h1>
		@TaskForm()
		@TasksList(tasks)
	}
}

templ TasksList(tasks []*types.Task) {
	<ul id="tasks" role="list" class="divide-y divide-gray-100">
		for _, task := range tasks {
			@TaskCard(task)
		}
	</ul>
}

templ TaskCard(task *types.Task) {
	<li id={ "task" + helper.Int64ToString(task.ID) } class="flex justify-between py-3">
		<div class="flex min-w-0 gap-4">
			<div class="flex flex-col shrink-0 gap-2">
				<div class="flex items-start space-x-2">
					<input
						type="checkbox"
						class="h-fit mt-[5px]"
						hx-swap="outerHTML"
						hx-put={ fmt.Sprintf("/tasks/%d/toggle", task.ID) }
						hx-target={ "#task" + helper.Int64ToString(task.ID) }
						if task.Completed.Bool {
							checked
						}
					/>
					<div x-cloak x-data="{ open: false }">
						<div x-show="!open" class="flex items-center space-x-2">
							<p
								@click="open = true"
								class="text-sm font-semibold w-fit leading-6 text-gray-900 cursor-pointer"
							>{ task.Title }</p>
						</div>
						<form
							hx-put={ fmt.Sprintf("/tasks/%d", task.ID) }
							hx-target={ fmt.Sprintf("#task%d", task.ID) }
							hx-swap="outerHTML"
							x-show="open"
							class="flex items-center space-x-2"
						>
							<input
								id="title"
								name="title"
								type="text"
								x-trap="open"
								required
								value={ task.Title }
								class="block w-full rounded-md !outline-none focus:ring-transparent text-gray-900 placeholder:text-gray-400 text-sm leading-6"
							/>
						</form>
					</div>
				</div>
				<p
					class="text-xs text-red-500 cursor-pointer"
					hx-delete={ fmt.Sprintf("/tasks/%d", task.ID) }
					hx-target={ fmt.Sprintf("#task%d", task.ID) }
					hx-swap="outerHTML"
				>Delete</p>
			</div>
		</div>
		<div class="shrink-0 flex flex-col items-end">
			@statusBadge(task)
			<p class="mt-1 text-xs leading-5 text-gray-500">{ task.CreatedAt.Local().Format("02 Jan 06 15:04") }</p>
		</div>
	</li>
}

templ TaskForm() {
	<form
		class="grid grid-cols-6 gap-2 mb-2"
		hx-post="/tasks"
		hx-target="#tasks"
		hx-swap="afterbegin"
		hx-on::after-request="this.reset()"
	>
		<input
			id="title"
			name="title"
			type="text"
			required
			class="col-span-5 block w-full px-2 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 text-sm leading-6"
		/>
		<button type="submit" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">+</button>
	</form>
}

templ statusBadge(task *types.Task) {
	<span
		class={
			"inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset",
			templ.KV("bg-green-50 text-green-700 ring-green-600/20", task.Completed.Bool),
			templ.KV("bg-red-50 text-red-700 ring-red-600/20", !task.Completed.Bool),
		}
	>
		if task.Completed.Bool {
			DONE
		} else {
			PENDING
		}
	</span>
}
